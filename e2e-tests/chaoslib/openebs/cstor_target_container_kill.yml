- name: Derive PV from application PVC 
  shell: >
    kubectl get pvc {{ app_pvc }}
    -o custom-columns=:spec.volumeName -n {{ app_ns }}
    --no-headers
  args:
    executable: /bin/bash
  register: pv

- name: Pick a cStor target pod belonging to the PV
  shell: > 
    kubectl get pods -l openebs.io/target=cstor-target
    -n {{ target_ns }} --no-headers | grep {{ pv.stdout }} 
    | shuf -n1 | awk '{print $1}'
  args:
    executable: /bin/bash
  register: cstor_target_pod

- name: Get the restartCount of "{{ target_container }}" container
  shell: >
    kubectl get pod {{ cstor_target_pod.stdout }} -n {{ target_ns }}
    -o=jsonpath='{.status.containerStatuses[?(@.name==''"{{target_container}}"'')].restartCount}'
  args:
    executable: /bin/bash
  register: restartCount_before

- include_tasks: /e2e-tests/chaoslib/pumba/pod_failure_by_sigkill.yaml
  vars:
    action: "killapp"
    namespace: "{{ target_ns }}"
    app_pod: "{{ cstor_target_pod.stdout }}"
    app_container: "{{ target_container }}"
  when: cri == 'docker'

- include_tasks: /e2e-tests/chaoslib/containerd_chaos/crictl-chaos.yml
  vars:
    action: "killapp"
    namespace: "{{ target_ns }}"
    app_pod: "{{ cstor_target_pod.stdout }}"
    app_container: "{{ target_container }}"
  when: cri == 'containerd'

- include_tasks: /e2e-tests/chaoslib/crio_chaos/crio-crictl-chaos.yml
  vars:
    action: "killapp"
    namespace: "{{ target_ns }}"
    app_pod: "{{ cstor_target_pod.stdout }}"
    app_container: "{{ target_container }}"
  when: cri == 'cri-o'

- name: Check for target pod in running state
  shell: >
    kubectl get pod {{ cstor_target_pod.stdout }} -n {{ target_ns }} |
    grep -w "Running" | wc -l
  args:
    executable: /bin/bash
  register: cstor_target_pod_cnt
  until: "cstor_target_pod_cnt.stdout == \"1\""
  delay: 30
  retries: 10

- name: Get the runningStatus of target pod
  shell: >
    kubectl get pod {{ cstor_target_pod.stdout }} -n {{ target_ns }}
    -o=jsonpath='{range .status.containerStatuses[*]}{.state}{"\n"}{end}' |
    grep -w running | wc -l
  args:
    executable: /bin/bash
  register: runningStatusCount
  until: "runningStatusCount.stdout == \"3\""
  delay: 30
  retries: 10

- name: Get the restartCount of "{{ target_container }}" container
  shell: >
    kubectl get pod {{ cstor_target_pod.stdout }} -n {{ target_ns }}
    -o=jsonpath='{.status.containerStatuses[?(@.name==''"{{target_container}}"'')].restartCount}'
  args:
    executable: /bin/bash
  register: restartCount_after

- name: Compare restartCounts
  debug:
    msg:
      - "Verified pool pods were restarted by fault injection"
      - "Before: {{ restartCount_before.stdout }}"
      - "After: {{ restartCount_after.stdout }}"
  failed_when: "restartCount_before.stdout|int >= restartCount_after.stdout|int"
