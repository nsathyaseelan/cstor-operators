---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml
    - /mnt/parameters.yml

  tasks:
    - block:

        - include_tasks: /e2e-tests/utils/k8s/application_liveness_check.yml
          when: liveness_label != ''    

        ## DERIVE THE APP STORAGE CLASS AND CHAOS UTIL TO USE

        - name: Identify the data consistency util to be invoked
          template:
            src: data_persistence.j2
            dest: data_persistence.yml  

        - include_vars:
            file: data_persistence.yml

        - name: Record the data consistency util path
          set_fact:
            data_consistency_util_path: "{{ consistencyutil }}"
          when: data_persistence != ''

        ## RECORD START-OF-TEST IN E2E RESULT CR
        
        - include_tasks: /e2e-tests/utils/fcm/create_testname.yml

        - include_tasks: /e2e-tests/utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'SOT'
            chaostype: target-network-loss

        ## PRE-CHAOS APPLICATION LIVENESS CHECK
        - name: Verify that the AUT (Application Under Test) is running
          include_tasks: "/e2e-tests/utils/k8s/status_app_pod.yml"
          vars:
            app_ns: "{{namespace}}" 
            app_lkey: "{{ label.split('=')[0] }}"
            app_lvalue: "{{ label.split('=')[1] }}"       
            delay: 5
            retries: 60

        - name: Get application pod name
          shell: >
            kubectl get pods -n {{ namespace }} -l {{ label }} --no-headers
            -o=custom-columns=NAME:".metadata.name"
          args:
            executable: /bin/bash
          register: app_pod_name

        - name: Create some test data
          include: "{{ data_consistency_util_path }}"
          vars:
            status: 'LOAD'
            ns: "{{ namespace }}"
            pod_name: "{{ app_pod_name.stdout }}"
          when: data_persistence != ''

        - name: Derive PV from application PVC 
          shell: >
            kubectl get pvc {{ pvc }}
            -o custom-columns=:spec.volumeName -n {{ namespace }}
            --no-headers
          args:
            executable: /bin/bash
          register: pv

        - name: Pick a cStor target pod belonging to the PV
          shell: >
            kubectl get pods -l openebs.io/target=cstor-target
            -n {{ operator_ns }} --no-headers | grep {{ pv.stdout }}
            | shuf -n1 | awk '{print $1}'
          args:
            executable: /bin/bash
          register: cstor_target_pod
    
        - include: /e2e-tests/chaoslib/openebs/inject_packet_loss_tc.yml
          vars:
            status: "induce"
            target_pod: "{{ cstor_target_pod.stdout }}"
            operator_namespace: "{{ operator_ns }}"
            containername: "cstor-istgt"                  

        - name: Wait for 240s post fault injection 
          wait_for:
            timeout: 240

        - include: /e2e-tests/chaoslib/openebs/inject_packet_loss_tc.yml
          vars:
            status: "remove"
            target_pod: "{{ cstor_target_pod.stdout }}"
            operator_namespace: "{{ operator_ns }}"
            containername: "cstor-istgt"

        - name: Verify that the volume is healthy
          shell: >
            kubectl get cstorvolume {{ pv.stdout }} -n {{ operator_ns }} 
            --no-headers -o custom-columns=:.status.phase
          args:
            executable: /bin/bash
          register: Status
          until: "'Healthy' in Status.stdout"
          delay: 5
          retries: 60

        - name: Wait for 240s post fault injection 
          wait_for:
             timeout: 240

        - name: Kill the application pod
          shell: >
            kubectl delete pod {{ app_pod_name.stdout }} -n {{ namespace }}
          args:
            executable: /bin/bash

        - name: Verify if the application pod is deleted
          shell: >
            kubectl get pods -n {{ namespace }}
          args:
            executable: /bin/bash
          register: podstatus
          until: '"{{ app_pod_name.stdout }}" not in podstatus.stdout'
          retries: 2
          delay: 150

        - name: Obtain the newly created pod name for application
          shell: >
            kubectl get pods -n {{ namespace }} -l {{ label }} -o jsonpath='{.items[].metadata.name}'
          args:
            executable: /bin/bash
          register: newpod_name

        - name: Verify that the AUT (Application Under Test) is running
          include_tasks: "/e2e-tests/utils/k8s/status_app_pod.yml"
          vars:
            app_ns: "{{ namespace }}" 
            app_lkey: "{{ label.split('=')[0] }}"
            app_lvalue: "{{ label.split('=')[1] }}"       
            delay: 5
            retries: 60

        - name: Verify test data
          include: "{{ data_consistency_util_path }}"
          vars:
            status: 'VERIFY'
            ns: "{{ namespace }}"
            pod_name: "{{ newpod_name.stdout }}"
          when: data_persistence != '' 

        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"

      always:

        ## RECORD END-OF-TEST IN E2E RESULT CR

        - include_tasks: /e2e-tests/utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'EOT'
            chaostype: target-network-loss
